import sqlite3
from datetime import date, time
import re
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackContext, filters
)

# üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("sobriety.db", check_same_thread=False)
c = conn.cursor()

c.execute('''
CREATE TABLE IF NOT EXISTS progress (
    user_id INTEGER PRIMARY KEY,
    start_date TEXT,
    sober_days INTEGER DEFAULT 0,
    total_days INTEGER DEFAULT 0,
    money_saved REAL DEFAULT 0,
    daily_spend REAL DEFAULT 10
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS settings (
    chat_id INTEGER PRIMARY KEY,
    notify_hour INTEGER,
    notify_minute INTEGER
)
''')
conn.commit()

# üîß –£—Ç–∏–ª–∏—Ç—ã
def init_user(user_id):
    c.execute("INSERT OR IGNORE INTO progress (user_id, start_date) VALUES (?, ?)", (user_id, date.today().isoformat()))
    conn.commit()

def set_daily_spend(user_id, amount):
    c.execute("UPDATE progress SET daily_spend = ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

def update_stats(user_id, is_sober):
    c.execute("SELECT daily_spend, sober_days, total_days, money_saved FROM progress WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    if not row:
        return
    spend, sober, total, saved = row
    total += 1
    if is_sober:
        sober += 1
        saved += spend
    c.execute("UPDATE progress SET sober_days=?, total_days=?, money_saved=? WHERE user_id=?",
              (sober, total, saved, user_id))
    conn.commit()

def get_stats(user_id):
    c.execute("SELECT start_date, sober_days, total_days, money_saved FROM progress WHERE user_id=?", (user_id,))
    return c.fetchone()

def save_notify_time(chat_id, hour, minute):
    c.execute("REPLACE INTO settings (chat_id, notify_hour, notify_minute) VALUES (?, ?, ?)",
              (chat_id, hour, minute))
    conn.commit()

def load_notify_time(chat_id):
    c.execute("SELECT notify_hour, notify_minute FROM settings WHERE chat_id=?", (chat_id,))
    return c.fetchone()

def get_all_notify_times():
    c.execute("SELECT chat_id, notify_hour, notify_minute FROM settings")
    return c.fetchall()

# üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
TOKEN = "7567781159:AAHzuKX2mRfkqTX_1kt8XTD2BGqiQjy57W4"
user_jobs = {}
user_states = {}
keyboard = ReplyKeyboardMarkup([["‚úÖ –ù–µ—Ç", "‚ùå –î–∞"]], one_time_keyboard=True)

def is_valid_time_format(text):
    return re.match(r'^\d{1,2}:\d{2}$', text)

# üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def daily_prompt(context: CallbackContext):
    chat_id = context.job.chat_id
    await context.bot.send_message(chat_id=chat_id, text="–¢—ã —Å–µ–≥–æ–¥–Ω—è —É–ø–æ—Ç—Ä–µ–±–ª—è–ª –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=keyboard)

# üëã –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    init_user(user_id)
    user_states[user_id] = "waiting_time"
    await update.message.reply_text("üëã –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:30)")

async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if not is_valid_time_format(text):
        await update.message.reply_text("‚è∞ –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 20:00")
        return

    try:
        hour, minute = map(int, text.split(":"))
        save_notify_time(chat_id, hour, minute)
        time_obj = time(hour=hour, minute=minute)
        job = context.application.job_queue.run_daily(daily_prompt, time_obj, chat_id=chat_id)
        user_jobs[chat_id] = job
        user_states[user_id] = "waiting_spend"
        await update.message.reply_text("‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ —Ç—Ä–∞—Ç–∏—à—å –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 10)")
    except:
        await update.message.reply_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def handle_spend_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    try:
        amount = float(text.replace(",", "."))
        set_daily_spend(user_id, amount)
        user_states[user_id] = None
        await update.message.reply_text("üëç –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")
    except:
        await update.message.reply_text("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    state = user_states.get(user_id)

    if state == "waiting_time":
        await handle_time_input(update, context)
        return
    if state == "waiting_spend":
        await handle_spend_input(update, context)
        return

    if text in ["‚úÖ –ù–µ—Ç", "‚ùå –î–∞", "–ù–µ—Ç", "–î–∞"]:
        is_sober = "–ù–µ—Ç" in text
        update_stats(user_id, is_sober)
        start_date, sober_days, total_days, saved_money = get_stats(user_id)
        await update.message.reply_text(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üìÖ –° –Ω–∞—á–∞–ª–∞: {start_date}\n"
            f"üö´ –¢—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π: {sober_days} –∏–∑ {total_days}\n"
            f"üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ‚Ç¨{saved_money:.2f}"
        )
    else:
        await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # üîå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    await app.initialize()
    await app.start()

    # üîî –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    for chat_id, hour, minute in get_all_notify_times():
        time_obj = time(hour=hour, minute=minute)
        job = app.job_queue.run_daily(daily_prompt, time_obj, chat_id=chat_id)
        user_jobs[chat_id] = job

    await app.updater.start_polling()
    await app.updater.wait_until_closed()
    await app.shutdown()

# ‚ñ∂ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())