import asyncio
import sqlite3
from datetime import date, time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackContext,
    filters
)

# üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect("stats.db", check_same_thread=False)
cur = conn.cursor()

cur.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    hour INTEGER,
    minute INTEGER,
    daily_spend REAL,
    sober_days INTEGER DEFAULT 0,
    total_days INTEGER DEFAULT 0,
    saved REAL DEFAULT 0,
    start_date TEXT
)
''')
conn.commit()

keyboard = ReplyKeyboardMarkup([["‚úÖ –ù–µ—Ç", "‚ùå –î–∞"]], one_time_keyboard=True)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["step"] = "time"
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:30)")

# üì• –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    step = context.user_data.get("step")

    if step == "time":
        try:
            h, m = map(int, msg.split(":"))
            context.user_data.update({"hour": h, "minute": m, "step": "spend"})
            await update.message.reply_text("üí∏ –°–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ —Ç—Ä–∞—Ç–∏—à—å –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å –≤ –¥–µ–Ω—å?")
        except:
            await update.message.reply_text("üö´ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ HH:MM")

    elif step == "spend":
        try:
            spend = float(msg.replace(",", "."))
            h, m = context.user_data["hour"], context.user_data["minute"]

            cur.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?, ?, 0, 0, 0, ?)",
                        (user_id, h, m, spend, date.today().isoformat()))
            conn.commit()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            t = time(hour=h, minute=m)
            context.application.job_queue.run_daily(daily_question, t, chat_id=update.effective_chat.id)
            context.user_data["step"] = None

            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üóì")
        except:
            await update.message.reply_text("üö´ –í–≤–µ–¥–∏ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5")

    else:
        await handle_reply(update, context)

# üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
async def daily_question(context: CallbackContext):
    await context.bot.send_message(chat_id=context.job.chat_id,
                                   text="–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏–ª –∞–ª–∫–æ–≥–æ–ª—å?",
                                   reply_markup=keyboard)

# üìä –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text

    if msg not in ["‚úÖ –ù–µ—Ç", "‚ùå –î–∞"]:
        await update.message.reply_text("üôÉ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç' –∏–ª–∏ '–î–∞'")
        return

    is_sober = "–ù–µ—Ç" in msg
    cur.execute("SELECT daily_spend, sober_days, total_days, saved, start_date FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()

    if row:
        spend, sober, total, saved, start = row
        total += 1
        if is_sober:
            sober += 1
            saved += spend
        cur.execute("UPDATE users SET sober_days=?, total_days=?, saved=? WHERE user_id=?",
                    (sober, total, saved, user_id))
        conn.commit()
        await update.message.reply_text(
            f"üìÖ –° –Ω–∞—á–∞–ª–∞: {start}\nüö´ –¢—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π: {sober} –∏–∑ {total}\nüí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ‚Ç¨{saved:.2f}"
        )
    else:
        await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏ —Å–Ω–∞—á–∞–ª–∞ /start")

# ‚öôÔ∏è –ó–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token("7567781159:AAHzuKX2mRfkqTX_1kt8XTD2BGqiQjy57W4").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
